!function(){var e={base_url:"http://localhost:3000/api",hideModals(){const e=document.querySelectorAll(".modal");for(const t of e)e.classList.remove("is-active")}};const t={makeTagInDom(e){const t=document.createElement("span");t.textContent=e.name,t.classList.add("tag"),t.style.backgroundColor=e.color,t.dataset.tagId=e.id;const o=e.card_has_tag.card_id;document.querySelector(`[data-card-id="${o}"]`).querySelector(".tags-container").appendChild(t)},async showAssociateTagToCardModale(t){const o=document.querySelector("#addTagToCardModal");o.classList.add("is-active"),t.target.closest(".box").dataset.cardId,o.querySelector('input[name="card_id"]');const a=o.querySelector("select");a.textContent="";try{const t=await fetch(e.base_url+"/tags");if(!t.ok)throw new Error(t);const o=await t.json();console.log(o);for(const e of o){const t=document.createElement("option");t.textContent=e.name,t.value=e.id,a.appendChild(t)}}catch(r){alert("Impossible to retrieve the list of tags"),console.error(r)}},async associateTagToCard(o){o.preventDefault();const a=new FormData(o.target),r=a.get("card_id"),s=a.get("tag_id");try{const o=await fetch(`${e.base_url}/cards/${r}/tags/${s}`,{method:"PUT"});if(!o.ok)throw new Error(o);const a=await o.json();document.querySelector(`[data-card-id="${r}"] .tags`).textContent="",a.tags.forEach(e=>{t.makeTagInDOM(e)})}catch(d){alert("Impossible to associate the tag to the card"),console.error(d)}e.hideModals()}};var o=t;const a={showAddCardModal(e){const t=document.getElementById("addCardModal");t.classList.add("is-active");const o=e.target.closest(".panel").dataset.listId;console.log("Id de la liste cliqu\xe9e :"+o),t.querySelector('input[name="list_id"]').value=o},async handleAddCardForm(t){t.preventDefault();const o=new FormData(t.target);try{const t=await fetch(e.base_url+"/cards",{method:"POST",body:o});if(!t.ok)throw new Error(t);const a=await t.json();app.makeCardInDOM(a)}catch(a){alert("Impossible to create the list")}e.hideModals()},makeCardInDOM(e){const t=document.getElementById("template-card"),r=document.importNode(t.content,!0),s=e.content;r.querySelector(".card-name").textContent=s,r.querySelector('input[name = "content"]').value=e.content,r.querySelector('input[name="color"]').value=e.color,r.querySelector(".box").dataset.cardId=e.id,r.querySelector('form input [name="id"]').value=e.id,r.querySelector(".box").style.backgroundColor=e.color,r.querySelector(".edit-card-icon").addEventListener("click",a.showEditCardForm),r.querySelector(".edit-card-form").addEventListener("submit",a.handleEditCardForm),r.querySelector(".delete-card-icon").addEventListener("click",a.deleteCard),r.querySelector(".associate-tag-icon").addEventListener("click",o.showAssociateTagToCardModale);const d=e.list_id;document.querySelector(`[data-list-id="${d}"]`).querySelector(".panel-block").appendChild(r)},showEditCardForm(e){const t=e.target.closest(".box");t.querySelector(".card-name").classList.add("is-hidden"),t.querySelector(".edit-card-form").classList.remove("is-hidden")},async handleEditCardForm(t){t.preventDefault();const o=t.target,a=new FormData(o),r=a.get("id"),s=o.previousElementSibling;try{const t=await fetch(`${e.base_url}/cards/${r}`,{method:"PATCH",body:a});if(console.log(t),!t.ok)throw new Error(t);const o=await t.json();s.textContent=o.content,newCard.querySelector(".box").style.backgroundColor=o.color}catch(d){alert("Impossible to edit the card content"),console.error(d)}o.classList.add("is-hidden"),s.classList.remove("is-hidden")},async deleteCard(t){const o=t.target.closest(".box"),a=o.dataset.cardId;confirm("Are you sure you went to supress this card ?");try{const t=await fetch(`${e.base_url}/cards/${a}`,{method:"DELETE"});if(console.log(t),!t.ok)throw new Error(t);o.remove()}catch(r){alert("Impossible to supress the card"),console.error(r)}},handleDragCard(e){let t=e.target.querySelectorAll(".box");if(a.updateAllCardsFromOneList(t),e.form===e.to)return;const o=e.to;let r=o.querySelectorAll(".box");o.closest("panel").dataset.listId,a.updateAllCardsFromOneList(r)},updateAllCardsFromOneList(t){cards.forEach(async(t,o)=>{const a=new FormData;a.set("position",o),listId&&a.set("list_id",listId);const r=t.dataset.cardId;try{const t=await fetch(`${e.base_url}/cards/${r}`,{method:"PATCH",body:a});if(!t.ok)throw new Error(t)}catch(s){alert("Impossible to move the card."),console.error(s)}})}};var r=a;const s={showAddListModal(){document.getElementById("addListModal").classList.add("is-active"),document.querySelector("#addListModal .input").focus()},async handleAddListForm(e){e.preventDefault();const t=e.target,o=new FormData(t);try{const e=await fetch(app.base_url+"/lists",{method:"POST",body:o});if(!e.ok)throw new Error(e);const t=await e.json();app.makeListInDOM(t)}catch(r){alert("Impossible to create the list")}const a=o.get("name");app.makeListInDOM(a),app.hideModals()},makeListInDOM(e){const t=document.getElementById("template-list"),o=document.importNode(t.content,!0);o.querySelector("h2").textContent=e.name,o.querySelector('input[name="name"]').value=e.name,o.quer,o.querySelector(".panel").dataset.listId=e.name,o.querySelector('form input[name="id"]').value=e.id,o.querySelector("button-add-card").addEventListener("click",r.showAddCardModal),o.querySelector("h2").addEventListener("dblclick",s.showEditListForm),o.querySelector(".edit-list-form").addEventListener("submit",s.handleEditListForm),o.querySelector("button-delete-list").addEventListener("click",s.deleteList);const a=o.querySelector(".panel-block");Sortable.create(a,{group:"list",onEnd:r.handlDragCard}),document.querySelector("#list-container").appendChild(o)},showEditListForm(e){e.target.classList.add("is-hidden"),e.target.nextElementSibling.classList.remove("is-hidden")},async handleEditListForm(t){t.preventDefault();const o=t.target,a=new FormData(o),r=a.get("id");console.log(r);const s=t.target.previousElementSibling;try{const t=await fetch(`${e.base_url}/lists/${r}`,{method:"PATCH",body:a});if(!t.ok)throw new Error(t);const o=(await t.json()).name;s.textContent=o}catch(d){alert("Impossible d'\xe9diter le nom de la liste")}o.classList.add("is-hidden"),s.classList.remove("is-hidden")},async deleteList(t){const o=t.target.closest(".panel");if(o.dataset.cardId,confirm("Are you sure you went to supress this list?"))try{const t=await fetch(`${e.base_url}/lists/${listId}`,{method:"DELETE"});if(!t.ok)throw new Error(t);o.remove()}catch(a){alert("Impossible to supress the list"),console.error(a)}},async handleDragList(t){document.querySelectorAll(".panel").forEach(async(t,o)=>{const a=t.dataset.listId,r=new FormData;Set("position",o);try{const t=await fetch(`${e.base_url}/lists/${a}`,{method:"PATCH",body:r});if(!t.ok)throw new Error(t)}catch(s){alert("Impossible to move the list"),console.error(s)}})}};var d=s;const n={base_url:"http://localhost:3000/api",init:function(){console.log("app.init !"),n.addListenerToActions(),n.getDataFromAPI()},addListenerToActions(){document.getElementById("addListButton").addEventListener("click",d.showAddListModal);const t=document.querySelectorAll(".close");for(const o of t)o.addEventListener("click",e.hideModals);document.querySelector("#addListModal form").addEventListener("submit",d.handleAddListForm);const a=document.querySelectorAll(".button-add-card");for(const e of a)e.addEventListener("click",r.showAddCardModal);document.querySelector("#addCardModal form").addEventListener("submit",r.handleAddCardForm),document.querySelector("#addTagToCardModal form").addEventListener("submit",o.associateTagToCard)},async getDataFromAPI(){try{const t=await fetch(e.base_url+"/lists");if(!t.ok)throw new Error(t);const a=await t.json();console.log(a);for(const e of a){d.makeListInDOM(e);for(const t of e.cards){n.makeCardInDOM(t);for(const e of t.tags)o.makeTageInDom(e)}}const r=document.querySelector("#list-container");Sortable.create(r,{onEnd:d.handleDragList})}catch(t){alert("Impossible to retieve the lists form the API"),console.error(t)}}};document.addEventListener("DOMContentLoaded",n.init)}();